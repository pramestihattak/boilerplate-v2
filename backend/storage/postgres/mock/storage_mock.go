// Code generated by MockGen. DO NOT EDIT.
// Source: ./backend/storage/postgres/storage.go
//
// Generated by this command:
//
//	mockgen -source ./backend/storage/postgres/storage.go -destination ./backend/storage/postgres/mock/storage_mock.go
//
// Package mock_postgres is a generated GoMock package.
package mock_postgres

import (
	postgres "boilerplate-v2/storage/postgres"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPostgresStore is a mock of PostgresStore interface.
type MockPostgresStore struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresStoreMockRecorder
}

// MockPostgresStoreMockRecorder is the mock recorder for MockPostgresStore.
type MockPostgresStoreMockRecorder struct {
	mock *MockPostgresStore
}

// NewMockPostgresStore creates a new mock instance.
func NewMockPostgresStore(ctrl *gomock.Controller) *MockPostgresStore {
	mock := &MockPostgresStore{ctrl: ctrl}
	mock.recorder = &MockPostgresStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresStore) EXPECT() *MockPostgresStoreMockRecorder {
	return m.recorder
}

// CheckedUserForVerification mocks base method.
func (m *MockPostgresStore) CheckedUserForVerification(ctx context.Context, email, verificationToken string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckedUserForVerification", ctx, email, verificationToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckedUserForVerification indicates an expected call of CheckedUserForVerification.
func (mr *MockPostgresStoreMockRecorder) CheckedUserForVerification(ctx, email, verificationToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckedUserForVerification", reflect.TypeOf((*MockPostgresStore)(nil).CheckedUserForVerification), ctx, email, verificationToken)
}

// Login mocks base method.
func (m *MockPostgresStore) Login(ctx context.Context, input *postgres.LoginInput) (*postgres.LoginOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, input)
	ret0, _ := ret[0].(*postgres.LoginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockPostgresStoreMockRecorder) Login(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockPostgresStore)(nil).Login), ctx, input)
}

// Register mocks base method.
func (m *MockPostgresStore) Register(ctx context.Context, reg postgres.Register) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, reg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockPostgresStoreMockRecorder) Register(ctx, reg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockPostgresStore)(nil).Register), ctx, reg)
}

// UserExist mocks base method.
func (m *MockPostgresStore) UserExist(ctx context.Context, email string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExist", ctx, email)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExist indicates an expected call of UserExist.
func (mr *MockPostgresStoreMockRecorder) UserExist(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExist", reflect.TypeOf((*MockPostgresStore)(nil).UserExist), ctx, email)
}

// VerifyUser mocks base method.
func (m *MockPostgresStore) VerifyUser(ctx context.Context, email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", ctx, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockPostgresStoreMockRecorder) VerifyUser(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockPostgresStore)(nil).VerifyUser), ctx, email)
}

// MockPostgresWriter is a mock of PostgresWriter interface.
type MockPostgresWriter struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresWriterMockRecorder
}

// MockPostgresWriterMockRecorder is the mock recorder for MockPostgresWriter.
type MockPostgresWriterMockRecorder struct {
	mock *MockPostgresWriter
}

// NewMockPostgresWriter creates a new mock instance.
func NewMockPostgresWriter(ctrl *gomock.Controller) *MockPostgresWriter {
	mock := &MockPostgresWriter{ctrl: ctrl}
	mock.recorder = &MockPostgresWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresWriter) EXPECT() *MockPostgresWriterMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockPostgresWriter) Register(ctx context.Context, reg postgres.Register) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, reg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockPostgresWriterMockRecorder) Register(ctx, reg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockPostgresWriter)(nil).Register), ctx, reg)
}

// VerifyUser mocks base method.
func (m *MockPostgresWriter) VerifyUser(ctx context.Context, email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", ctx, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockPostgresWriterMockRecorder) VerifyUser(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockPostgresWriter)(nil).VerifyUser), ctx, email)
}

// MockPostgresReader is a mock of PostgresReader interface.
type MockPostgresReader struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresReaderMockRecorder
}

// MockPostgresReaderMockRecorder is the mock recorder for MockPostgresReader.
type MockPostgresReaderMockRecorder struct {
	mock *MockPostgresReader
}

// NewMockPostgresReader creates a new mock instance.
func NewMockPostgresReader(ctrl *gomock.Controller) *MockPostgresReader {
	mock := &MockPostgresReader{ctrl: ctrl}
	mock.recorder = &MockPostgresReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresReader) EXPECT() *MockPostgresReaderMockRecorder {
	return m.recorder
}

// CheckedUserForVerification mocks base method.
func (m *MockPostgresReader) CheckedUserForVerification(ctx context.Context, email, verificationToken string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckedUserForVerification", ctx, email, verificationToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckedUserForVerification indicates an expected call of CheckedUserForVerification.
func (mr *MockPostgresReaderMockRecorder) CheckedUserForVerification(ctx, email, verificationToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckedUserForVerification", reflect.TypeOf((*MockPostgresReader)(nil).CheckedUserForVerification), ctx, email, verificationToken)
}

// Login mocks base method.
func (m *MockPostgresReader) Login(ctx context.Context, input *postgres.LoginInput) (*postgres.LoginOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, input)
	ret0, _ := ret[0].(*postgres.LoginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockPostgresReaderMockRecorder) Login(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockPostgresReader)(nil).Login), ctx, input)
}

// UserExist mocks base method.
func (m *MockPostgresReader) UserExist(ctx context.Context, email string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExist", ctx, email)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExist indicates an expected call of UserExist.
func (mr *MockPostgresReaderMockRecorder) UserExist(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExist", reflect.TypeOf((*MockPostgresReader)(nil).UserExist), ctx, email)
}
